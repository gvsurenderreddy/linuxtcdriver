// Generated by CoffeeScript 1.9.3
(function() {
  var Schema, async, config, delLink, exec, execute, extend, fs, tcqdisc, util;

  util = require('util');

  exec = require('child_process').exec;

  fs = require('fs');

  extend = require('util')._extend;

  async = require('async');

  Schema = {
    name: "tcqdisc",
    type: "object",
    required: true,
    properties: {
      bandwidth: {
        "type": "string",
        "required": false
      },
      latency: {
        "type": "string",
        "required": false
      },
      jitter: {
        "type": "string",
        "required": false
      },
      pktloss: {
        "type": "string",
        "required": false
      }
    }
  };

  execute = function(command, callback) {
    if (command == null) {
      callback(false);
    }
    util.log("executing " + command + "...");
    return exec(command, (function(_this) {
      return function(error, stdout, stderr) {
        util.log("tcdriver: execute - Error : " + error);
        util.log("tcdriver: execute - stdout : " + stdout);
        util.log("tcdriver: execute - stderr : " + stderr);
        if (error) {
          return callback(error);
        } else {
          return callback(true);
        }
      };
    })(this));
  };

  delLink = function(ifname, callback) {
    var command;
    command = "ip link delete " + ifname;
    util.log("executing " + command + "...");
    return execute(command, (function(_this) {
      return function(result) {
        if (result instanceof Error) {
          return callback(false);
        } else {
          return callback(false);
        }
      };
    })(this));
  };

  tcqdisc = (function() {
    function tcqdisc(ifname, data) {
      var base, cmd1, command;
      this["interface"] = ifname;
      this.config = extend({}, data);
      this.stats = {};
      if ((base = this.config).bandwidth == null) {
        base.bandwidth = "100mbit";
      }
      this.commands = [];
      console.log("tcqdisc object created with " + JSON.stringify(this.config));
      this.commands = [];
      if ((this.config.latency == null) && (this.config.jitter == null) && (this.config.pktloss == null)) {
        console.log("HTB case - only bandwidth");
        console.log("HTB0 bandwidth : " + this.config.bandwidth + " latency: " + this.config.latency + " jitter: " + this.config.jitter + "  packetloss : " + this.config.pktloss + " ");
        command = "tc qdisc add dev " + this["interface"] + " root tbf rate " + this.config.bandwidth + " burst 100kb latency 0.001ms";
        this.commands.push(command);
      } else {
        console.log("Netem case");
        console.log("Netem bandwidth : " + this.config.bandwidth + " latency: " + this.config.latency + " jitter: " + this.config.jitter + "  packetloss : " + this.config.pktloss + " ");
        command = "tc qdisc add dev " + this["interface"] + " root handle 1:0 netem delay " + this.config.latency + " ";
        if (this.config.jitter != null) {
          command += " " + this.config.jitter;
        }
        if (this.config.pktloss != null) {
          command += " loss " + this.config.pktloss + " ";
        }
        this.commands.push(command);
        cmd1 = "tc qdisc add dev " + this["interface"] + " parent 1:1 handle 10: tbf rate  " + this.config.bandwidth + " buffer 1600 limit 3000";
        this.commands.push(cmd1);
      }
    }

    tcqdisc.prototype.run = function(cb) {
      return async.eachSeries(this.commands, (function(_this) {
        return function(command, callback) {
          return execute(command, function(result) {
            console.log("create result ", result);
            return callback();
          });
        };
      })(this), (function(_this) {
        return function(err) {
          if (err) {
            console.log("LinkConfig error occured " + JSON.stringify(err));
            return cb(false);
          } else {
            console.log("LinkConfig  all are processed ");
            return cb(true);
          }
        };
      })(this));
    };

    tcqdisc.prototype.create = function() {
      return this.run(function(cb) {
        return cb;
      });
    };

    tcqdisc.prototype.get = function() {
      return {
        "interface": this["interface"],
        config: this.config,
        stats: this.stats
      };
    };

    tcqdisc.prototype.del = function() {
      var cmd;
      cmd = "tc qdisc del dev " + this["interface"] + " root";
      console.log("del command", cmd);
      return execute(cmd, function(result) {
        return console.log("delete cmd result ", result);
      });
    };

    tcqdisc.prototype.statistics = function(callback) {
      var command;
      command = "tc -s qdisc show dev " + this["interface"];
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          var result, tmp0, tmp1, tmparr;
          util.log("tcdriver: execute - Error : " + error);
          util.log("tcdriver: execute - stdout : " + stdout);
          util.log("tcdriver: execute - stderr : " + stderr);
          if (error) {
            return callback(error);
          }
          result = stdout.toString();
          tmparr = [];
          tmparr = result.split("\n");
          if (tmparr[3].search('qdisc tbf') !== -1) {
            tmp0 = tmparr[3].split(' ');
            tmp1 = tmparr[4].split(' ');
            _this.stats.sentbytes = tmp1[2];
            _this.stats.sentpackets = tmp1[4];
            _this.stats.droppedpackets = tmp1[7];
            return callback(_this.stats);
          } else {
            return callback(new Error("error during stats colletion"));
          }
        };
      })(this));
    };

    return tcqdisc;

  })();

  module.exports = tcqdisc;

  module.exports.delLink = delLink;

  config = {
    bandwidth: "1mbit",
    latency: "10ms",
    jitter: "0.1ms",
    pktloss: "0.1%"
  };


  /*
  tcobj = new tcqdisc "virbr0", config
  console.log tcobj.commands
  tcobj.run (result)->
      console.log "run ",result
      tcobj.statistics (result)->
          console.log "stats",result
  #tcobj.del()
   */

}).call(this);
