// Generated by CoffeeScript 1.9.3
(function() {
  var Schema, config, exec, execute, extend, fs, tcobj, tcqdisc, util;

  util = require('util');

  exec = require('child_process').exec;

  fs = require('fs');

  extend = require('util')._extend;

  Schema = {
    name: "tcqdisc",
    type: "object",
    required: true,
    properties: {
      bandwidth: {
        "type": "string",
        "required": false
      },
      latency: {
        "type": "string",
        "required": false
      },
      jitter: {
        "type": "string",
        "required": false
      },
      pktloss: {
        "type": "string",
        "required": false
      }
    }
  };

  execute = function(command, callback) {
    if (command == null) {
      callback(false);
    }
    util.log("executing " + command + "...");
    return exec(command, (function(_this) {
      return function(error, stdout, stderr) {
        util.log("tcdriver: execute - Error : " + error);
        util.log("tcdriver: execute - stdout : " + stdout);
        util.log("tcdriver: execute - stderr : " + stderr);
        if (error) {
          return callback(error);
        } else {
          return callback(true);
        }
      };
    })(this));
  };

  tcqdisc = (function() {
    function tcqdisc(ifname, data) {
      var base;
      this["interface"] = ifname;
      this.config = extend({}, data);
      if ((base = this.config).bandwidth == null) {
        base.bandwidth = "100mbit";
      }
      console.log("tcqdisc object created with " + JSON.stringify(this.config));
    }

    tcqdisc.prototype.create = function() {
      var cmd1, command;
      if ((this.config.latency == null) && (this.config.jitter == null) && (this.config.pktloss == null)) {
        console.log("HTB case - only bandwidth");
        console.log("HTB0 bandwidth : " + this.config.bandwidth + " latency: " + this.config.latency + " jitter: " + this.config.jitter + "  packetloss : " + this.config.pktloss + " ");
        command = "tc qdisc add dev " + this["interface"] + " root tbf rate " + this.config.bandwidth + " burst 100kb latency 0.001ms";
        return execute(command, function(result) {
          return console.log("create result ", result);

          /*
                  else if @config.latency? and not @config.jitter? and not @config.pktloss?
                      console.log "HTB Case bandwidth and delay"
                      console.log "HTB1 bandwidth : #{@config.bandwidth} latency: #{@config.latency} jitter: #{@config.jitter}  packetloss : #{@config.pktloss} "
                      command = "tc qdisc add dev #{@interface} root tbf rate #{@config.bandwidth} burst 100kb latency #{@config.latency}"
                      execute command,(result)->
          console.log "create result ", result
           */
        });
      } else {
        console.log("Netem case");
        console.log("Netem bandwidth : " + this.config.bandwidth + " latency: " + this.config.latency + " jitter: " + this.config.jitter + "  packetloss : " + this.config.pktloss + " ");
        command = "tc qdisc add dev " + this["interface"] + " root handle 1:0 netem delay " + this.config.latency + " ";
        cmd1 = "tc qdisc add dev " + this["interface"] + " parent 1:1 handle 10: tbf rate  " + this.config.bandwidth + " buffer 1600 limit 3000";
        if (this.config.jitter != null) {
          cmd1 += " " + this.config.jitter;
        }
        if (this.config.pktloss != null) {
          cmd1 += " loss " + this.config.pktloss + " ";
        }
        return execute(command, function(result) {
          console.log("create result ", result);
          return execute(cmd1, function(result) {
            return console.log("create result ", result);
          });
        });
      }
    };

    tcqdisc.prototype.get = function() {
      return {
        "interface": this["interface"],
        config: this.config,
        stats: null
      };
    };

    tcqdisc.prototype.del = function() {
      var cmd;
      cmd = "tc qdisc del dev " + this["interface"] + " root";
      console.log("del command", cmd);
      return execute(cmd, function(result) {
        return console.log("delete cmd result ", result);
      });
    };

    tcqdisc.prototype.stats = function() {};

    return tcqdisc;

  })();

  config = {
    bandwidth: "1mbit",
    latency: "10ms"
  };

  tcobj = new tcqdisc("virbr0", config);

  tcobj.create();

}).call(this);
