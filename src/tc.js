// Generated by CoffeeScript 1.9.3
var Schema, config, exec, execute, extend, fs, tcobj, tcqdisc, util;

util = require('util');

exec = require('child_process').exec;

fs = require('fs');

extend = require('util')._extend;

Schema = {
  name: "tcqdisc",
  type: "object",
  required: true,
  properties: {
    bandwidth: {
      "type": "string",
      "required": false
    },
    latency: {
      "type": "string",
      "required": false
    },
    jitter: {
      "type": "string",
      "required": false
    },
    pktloss: {
      "type": "string",
      "required": false
    }
  }
};

execute = function(command, callback) {
  if (command == null) {
    callback(false);
  }
  util.log("executing " + command + "...");
  return exec(command, (function(_this) {
    return function(error, stdout, stderr) {
      util.log("tcdriver: execute - Error : " + error);
      util.log("tcdriver: execute - stdout : " + stdout);
      util.log("tcdriver: execute - stderr : " + stderr);
      if (error) {
        return callback(error);
      } else {
        return callback(true);
      }
    };
  })(this));
};

tcqdisc = (function() {
  function tcqdisc(ifname, data) {
    var base, base1, base2, base3;
    this["interface"] = ifname;
    this.config = extend({}, data);
    if ((base = this.config).bandwidth == null) {
      base.bandwidth = "100mbit";
    }
    if ((base1 = this.config).latency == null) {
      base1.latency = "0ms";
    }
    if ((base2 = this.config).jitter == null) {
      base2.jitter = "0ms";
    }
    if ((base3 = this.config).pktloss == null) {
      base3.pktloss = "0%";
    }
    console.log("tcqdisc object created with " + JSON.stringify(this.config));
  }

  tcqdisc.prototype.create = function() {
    var cmd, cmd1, command;
    if (this.config.latency === "0ms" && this.config.jitter === "0ms" && this.config.pktloss === "0%") {
      command = "tc qdisc add dev " + this["interface"] + " root tbf rate " + this.config.bandwidth + " burst 100kb latency 0.001ms";
      console.log("command is ", command);
      return execute(command, function(result) {
        return console.log("create result ", result);
      });
    } else {
      cmd = "";
      if (this.config.latency !== "0ms") {
        cmd += "tc qdisc add dev " + this["interface"] + " root handle 1:0 netem delay " + this.config.latency + " ";
      }
      if (this.config.jtter !== "0ms") {
        cmd += " " + this.config.jitter + " ";
      }
      if (this.config.pktloss !== "0%") {
        cmd += " loss " + this.config.pktloss + " ";
      }
      console.log("command is ", cmd);
      cmd1 = "tc qdisc add dev " + this["interface"] + " parent 1:1 handle 10: tbf rate  " + this.config.bandwidth + " buffer 1600 limit 3000";
      return execute(cmd, function(result) {
        console.log("create cmd result ", result);
        console.log("command1 is ", cmd1);
        return execute(cmd1, function(result) {
          return console.log("create cmd1 result ", result);
        });
      });
    }
  };

  tcqdisc.prototype.get = function() {
    return {
      config: this.config,
      stats: null
    };
  };

  tcqdisc.prototype.del = function() {
    var cmd;
    cmd = "tc qdisc del dev " + this["interface"] + " root";
    console.log("del command", cmd);
    return execute(cmd, function(result) {
      return console.log("delete cmd result ", result);
    });
  };

  tcqdisc.prototype.stats = function() {};

  return tcqdisc;

})();

config = {
  bandwidth: "1mbit",
  latency: "10ms",
  jitter: "0.1ms",
  pktloss: "0.1%"
};

tcobj = new tcqdisc("eth0", config);

tcobj.create();

console.log(tcobj.get());
